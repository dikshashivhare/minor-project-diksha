<div class="card">
  <div class="card-body">

<%= form_for([:admin, @job ]) do |form| %>
  <% if job.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(job.errors.count, "error") %> prohibited this job from being saved:</h2>

      <ul>
      <% job.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-group">
    <%= form.label :job_category %>
    <%= form.select :job_category_id, options_for_select(JobCategory.all.collect{|jc| [jc.name, jc.id]}), {}, {id: :job_job_category, class: "form-control"} %>
  </div>

  <div class="form-group">
    <%= form.label :job_title %>
    <%= form.text_field :job_title, id: :job_job_title, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :email %>
    <%= form.text_field :email, id: :job_email, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :job_type %>
    <%= form.text_field :job_type, id: :job_job_type , class: "form-control"%>
  </div>

  <div class="form-group">
    <%= form.label :venue %>
    <%= form.text_field :venue, id: :job_venue , class: "form-control", id:"autocomplete",
     onFocus: "geolocate()"%>
  </div>

  <div class="form-group">
    <%= form.label :city %>
    <%= form.text_field :city, id: :job_city, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :state %>
    <%= form.text_field :state, id: :job_state, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :country %>
    <%= form.text_field :country, id: :job_country, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :zipcode %>
    <%= form.text_field :zipcode, id: :job_zipcode, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :job_description %>
    <%= form.text_area :job_description, id: :job_job_description, rows: "5" , class: "form-control"%>
  </div>

  <div class="form-group">
    <%= form.label :salary_range %>
    <%= form.text_field :salary_range, id: :job_salary_range, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :employeer_id %>
    <%= form.number_field :employeer_id, id: :job_employeer_id, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :company_id %>
    <%= form.number_field :company_id, id: :job_company_id , class: "form-control"%>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>
</div>
</div>
 <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAfsqCxbcgsqYXMucH08nfifdtXK-8lPIQ&libraries=places&callback=initAutocomplete"
        async defer></script>
  </body

